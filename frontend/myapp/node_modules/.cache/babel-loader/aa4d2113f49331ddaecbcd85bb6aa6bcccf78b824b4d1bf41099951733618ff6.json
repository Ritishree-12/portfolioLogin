{"ast":null,"code":"const express = require('express');\nconst mysql = require('mysql');\nconst cors = require('cors');\nconst app = express();\napp.use(express.json());\napp.use(cors());\n\n// Database Connection\nconst db = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: '',\n  database: 'mydata'\n});\n\n// Check if the database connection is successful\ndb.connect(err => {\n  if (err) {\n    console.error('Error connecting to the database:', err);\n  } else {\n    console.log('Connected to the database');\n  }\n});\napp.post('/login', (req, res) => {\n  const {\n    email,\n    password\n  } = req.body; // Destructure email and password from the request body\n  const sql = \"SELECT * FROM login WHERE username = ? AND password = ?\";\n  db.query(sql, [email, password], (err, data) => {\n    if (err) {\n      console.error('Database error:', err);\n      return res.json({\n        error: 'Database error'\n      }); // Handle database error\n    }\n\n    if (data.length > 0) {\n      return res.json({\n        message: 'Login successful'\n      });\n    } else {\n      return res.json({\n        message: 'No records found'\n      });\n    }\n  });\n});\napp.listen(8081, () => {\n  console.log('Listening on port 8081...');\n});","map":{"version":3,"names":["express","require","mysql","cors","app","use","json","db","createConnection","host","user","password","database","connect","err","console","error","log","post","req","res","email","body","sql","query","data","length","message","listen"],"sources":["E:/avalability/Lister_Availability/frontend/myapp/src/components/Auth/NoPage.js"],"sourcesContent":["const express = require('express');\r\nconst mysql = require('mysql');\r\nconst cors = require('cors');\r\n\r\nconst app = express();\r\napp.use(express.json());\r\napp.use(cors());\r\n\r\n// Database Connection\r\nconst db = mysql.createConnection({\r\n  host: 'localhost',\r\n  user: 'root',\r\n  password: '',\r\n  database: 'mydata'\r\n});\r\n\r\n// Check if the database connection is successful\r\ndb.connect((err) => {\r\n  if (err) {\r\n    console.error('Error connecting to the database:', err);\r\n  } else {\r\n    console.log('Connected to the database');\r\n  }\r\n});\r\n\r\napp.post('/login', (req, res) => {\r\n  const { email, password } = req.body; // Destructure email and password from the request body\r\n  const sql = \"SELECT * FROM login WHERE username = ? AND password = ?\";\r\n\r\n  db.query(sql, [email, password], (err, data) => {\r\n    if (err) {\r\n      console.error('Database error:', err);\r\n      return res.json({ error: 'Database error' }); // Handle database error\r\n    }\r\n    if (data.length > 0) {\r\n      return res.json({ message: 'Login successful' });\r\n    } else {\r\n      return res.json({ message: 'No records found' });\r\n    }\r\n  });\r\n});\r\n\r\napp.listen(8081, () => {\r\n  console.log('Listening on port 8081...');\r\n});\r\n\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAO,CAAC;AAC9B,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAE5B,MAAMG,GAAG,GAAGJ,OAAO,CAAC,CAAC;AACrBI,GAAG,CAACC,GAAG,CAACL,OAAO,CAACM,IAAI,CAAC,CAAC,CAAC;AACvBF,GAAG,CAACC,GAAG,CAACF,IAAI,CAAC,CAAC,CAAC;;AAEf;AACA,MAAMI,EAAE,GAAGL,KAAK,CAACM,gBAAgB,CAAC;EAChCC,IAAI,EAAE,WAAW;EACjBC,IAAI,EAAE,MAAM;EACZC,QAAQ,EAAE,EAAE;EACZC,QAAQ,EAAE;AACZ,CAAC,CAAC;;AAEF;AACAL,EAAE,CAACM,OAAO,CAAEC,GAAG,IAAK;EAClB,IAAIA,GAAG,EAAE;IACPC,OAAO,CAACC,KAAK,CAAC,mCAAmC,EAAEF,GAAG,CAAC;EACzD,CAAC,MAAM;IACLC,OAAO,CAACE,GAAG,CAAC,2BAA2B,CAAC;EAC1C;AACF,CAAC,CAAC;AAEFb,GAAG,CAACc,IAAI,CAAC,QAAQ,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EAC/B,MAAM;IAAEC,KAAK;IAAEV;EAAS,CAAC,GAAGQ,GAAG,CAACG,IAAI,CAAC,CAAC;EACtC,MAAMC,GAAG,GAAG,yDAAyD;EAErEhB,EAAE,CAACiB,KAAK,CAACD,GAAG,EAAE,CAACF,KAAK,EAAEV,QAAQ,CAAC,EAAE,CAACG,GAAG,EAAEW,IAAI,KAAK;IAC9C,IAAIX,GAAG,EAAE;MACPC,OAAO,CAACC,KAAK,CAAC,iBAAiB,EAAEF,GAAG,CAAC;MACrC,OAAOM,GAAG,CAACd,IAAI,CAAC;QAAEU,KAAK,EAAE;MAAiB,CAAC,CAAC,CAAC,CAAC;IAChD;;IACA,IAAIS,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;MACnB,OAAON,GAAG,CAACd,IAAI,CAAC;QAAEqB,OAAO,EAAE;MAAmB,CAAC,CAAC;IAClD,CAAC,MAAM;MACL,OAAOP,GAAG,CAACd,IAAI,CAAC;QAAEqB,OAAO,EAAE;MAAmB,CAAC,CAAC;IAClD;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;AAEFvB,GAAG,CAACwB,MAAM,CAAC,IAAI,EAAE,MAAM;EACrBb,OAAO,CAACE,GAAG,CAAC,2BAA2B,CAAC;AAC1C,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}